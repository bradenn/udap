@startuml
namespace bond {
    class Bond << (S,Aquamarine) >> {
        - channel <font color=blue>chan</font> Msg

        - send(target Msg) (<font color=blue>interface</font>{}, error)

        + SendIdJSON(target string, operation string, id string, body string) (<font color=blue>interface</font>{}, error)
        + SendId(target string, operation string, id string, body <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)
        + CmdJSON(body []byte) (<font color=blue>interface</font>{}, error)
        + Msg(msg Msg) (<font color=blue>interface</font>{}, error)
        + Send(target string, operation string, body <font color=blue>interface</font>{}) (<font color=blue>interface</font>{}, error)

    }
    class Msg << (S,Aquamarine) >> {
        - resolved bool

        + Target string
        + Operation string
        + Id string
        + Body <font color=blue>interface</font>{}
        + Payload string
        + Resp <font color=blue>chan</font> Resp

        + FromJSON(data json.RawMessage) error
        + ResponseJSON(body []byte, err error) 
        + Respond(body <font color=blue>interface</font>{}, err error) 
        + Success() 

    }
    class Resp << (S,Aquamarine) >> {
        + Success bool
        + Error string
        + Body <font color=blue>interface</font>{}

    }
}


namespace controller {
    class Attributes << (S,Aquamarine) >> {
        - request(event bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + Register(attribute *models.Attribute) error
        + Request(entity string, key string, value string) error
        + EmitAll() error
        + Set(entity string, key string, value string) error
        + Update(entity string, key string, value string, stamp time.Time) error
        + Query(entity string, key string) string
        + Compile() []models.Attribute
        + Find(name string) *models.Attribute
        + Store(attribute *models.Attribute) 

    }
    class Controller << (S,Aquamarine) >> {
        - event <font color=blue>chan</font> bond.Msg

        + Entities *Entities
        + Attributes *Attributes
        + Modules *Modules
        + Endpoints *Endpoints
        + Devices *Devices
        + Zones *Zones
        + Networks *Networks
        + Users *Users

        + Handle(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        + EmitAll() error
        + Meta(msg bond.Msg) error

    }
    class Devices << (S,Aquamarine) >> {
        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + Compile() ([]models.Device, error)
        + EmitAll() error
        + FetchAll() 
        + Find(name string) *models.Device
        + Register(device models.Device) (*models.Device, error)
        + Set(id string, device *models.Device) 

    }
    class Endpoints << (S,Aquamarine) >> {
        - bond *bond.Bond
        - router chi.Router

        - create(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        - unenroll(msg bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        + EmitAll() error
        + FetchAll() 
        + Compile() ([]models.Endpoint, error)
        + Find(id string) *models.Endpoint
        + Set(id string, endpoint *models.Endpoint) 
        + Save(endpoint *models.Endpoint) 

    }
    class Entities << (S,Aquamarine) >> {
        - neural(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - register(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - find(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - predict(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - rename(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - lock(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - unlock(event bond.Msg) (<font color=blue>interface</font>{}, error)
        - icon(event bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + EmitAll() error
        + Suggest(id string, body string) (<font color=blue>interface</font>{}, error)
        + Cast(body <font color=blue>interface</font>{}) *models.Entity
        + Parse(body string) models.Entity
        + Register(entity *models.Entity) (*models.Entity, error)
        + Rename(id string, name string) (<font color=blue>interface</font>{}, error)
        + Config(id string, data string) (<font color=blue>interface</font>{}, error)
        + Find(name string) *models.Entity
        + Set(id string, entity *models.Entity) 

    }
    class Generic << (S,Aquamarine) >> {
        - store sync.Map

    }
    class Modules << (S,Aquamarine) >> {
        - register(event bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + Register(module string) error
        + FetchAll() 
        + Pull() 
        + Compile() ([]models.Module, error)
        + Find(name string) *models.Module
        + Set(id string, module *models.Module) 

    }
    class Mutation << (S,Aquamarine) >> {
        + Key string
        + Value <font color=blue>interface</font>{}

    }
    class Networks << (S,Aquamarine) >> {
        - register(event bond.Msg) (*models.Network, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + Compile() ([]models.Network, error)
        + Register(network *models.Network) (*models.Network, error)
        + EmitAll() error
        + FetchAll() 
        + Pull() 
        + Find(name string) *models.Network
        + Set(id string, entity *models.Network) 

    }
    class Observable << (S,Aquamarine) >> {
        - watchers <font color=blue>map</font>[string]Observer
        - singleWatchers <font color=blue>map</font>[string]<font color=blue>map</font>[string]Observer
        - handler <font color=blue>chan</font> Mutation

        - emit(id string, data <font color=blue>interface</font>{}) 

        + Run() 
        + WatchSingle(key string, fn <font color=blue>func</font>(<font color=blue>interface</font>{}) error) 
        + Watch(fn <font color=blue>func</font>(<font color=blue>interface</font>{}) error) 

    }
    class Observer << (S,Aquamarine) >> {
        - caller string
        - callback <font color=blue>func</font>(<font color=blue>interface</font>{}) error

    }
    class PolyBuffer << (S,Aquamarine) >> {
        - raw <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        - data sync.Map

        - set(id string, data <font color=blue>interface</font>{}) 
        - get(name string) <font color=blue>interface</font>{}
        - remove(name string) error

        + Keys() []string

    }
    class Response << (S,Aquamarine) >> {
        + Id string
        + Status string
        + Operation string
        + Body <font color=blue>interface</font>{}

    }
    class Users << (S,Aquamarine) >> {
        - register(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        - authenticate(msg bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + EmitAll() error
        + FetchAll() []models.User
        + Pull() 
        + Find(name string) *models.User
        + Set(id string, entity *models.User) 

    }
    class Zones << (S,Aquamarine) >> {
        - delete(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        - restore(msg bond.Msg) (<font color=blue>interface</font>{}, error)
        - create(msg bond.Msg) (<font color=blue>interface</font>{}, error)

        + Handle(event bond.Msg) (<font color=blue>interface</font>{}, error)
        + Register(zone models.Zone) (*models.Zone, error)
        + Compile() ([]models.Zone, error)
        + EmitAll() error
        + FetchAll() 
        + Find(id string) *models.Zone
        + Set(id string, zone *models.Zone) 
        + Delete(id string) 

    }
}
"controller.Observable" *-- "controller.Attributes"
"controller.PolyBuffer" *-- "controller.Attributes"
"controller.Observable" *-- "controller.Devices"
"controller.PolyBuffer" *-- "controller.Devices"
"controller.Observable" *-- "controller.Endpoints"
"controller.PolyBuffer" *-- "controller.Endpoints"
"controller.Observable" *-- "controller.Entities"
"controller.PolyBuffer" *-- "controller.Entities"
"controller.Observable" *-- "controller.Modules"
"controller.PolyBuffer" *-- "controller.Modules"
"controller.Observable" *-- "controller.Networks"
"controller.PolyBuffer" *-- "controller.Networks"
"controller.Observable" *-- "controller.Users"
"controller.PolyBuffer" *-- "controller.Users"
"controller.Observable" *-- "controller.Zones"
"controller.PolyBuffer" *-- "controller.Zones"


namespace dmx {
    interface Controller  {
        + Connect() error
        + Close() error
        + GetSerial() (string, error)
        + GetProduct() (string, error)
        + SetChannel(channel int16, value byte) error
        + GetChannel(channel int16) (byte, error)
        + Render() error

    }
    class ControllerConfig << (S,Aquamarine) >> {
        + OutputId int
        + Context *gousb.Context
        + DebugLevel int

        + GetUSBContext() 

    }
}


namespace endpoint {
    class Endpoint << (S,Aquamarine) >> {
        + Name string
        + Key string

        + BeforeCreate(_ *gorm.DB) error

    }
}
"store.Persistent" *-- "endpoint.Endpoint"


namespace ft232 {
    class DMXController << (S,Aquamarine) >> {
        - channels []byte
        - packet []byte
        - ctx *gousb.Context
        - device *gousb.Device
        - output *gousb.OutEndpoint
        - outputInterfaceID int

        - sendControl(controls []controlHeader) error

        + Connect() error
        + Close() error
        + SetChannel(index int16, data byte) error
        + GetChannel(index int16) (byte, error)
        + Render() error

    }
    class controlHeader << (S,Aquamarine) >> {
        - request uint8
        - val uint16

        - send(d *gousb.Device) error

    }
}


namespace log {
    class log.LogType << (T, #FF7700) >>  {
    }
}


namespace main {
    class Cmd << (S,Aquamarine) >> {
        + Name string
        + Value <font color=blue>interface</font>{}

    }
    class Color << (S,Aquamarine) >> {
        + R int
        + B int
        + G int

    }
    class CurrentResponse << (S,Aquamarine) >> {
        + Device <font color=blue>struct</font>{string, bool, bool, bool, string, string, int}
        + ShuffleState bool
        + RepeatState string
        + Timestamp int64
        + Context <font color=blue>interface</font>{}
        + ProgressMs int
        + Item <font color=blue>struct</font>{<font color=blue>struct</font>{string, []<font color=blue>struct</font>{<font color=blue>struct</font>{string}, string, string, string, string, string}, []string, <font color=blue>struct</font>{string}, string, string, []<font color=blue>struct</font>{int, string, int}, string, string, string, int, string, string}, []<font color=blue>struct</font>{<font color=blue>struct</font>{string}, string, string, string, string, string}, []string, int, int, bool, <font color=blue>struct</font>{string}, <font color=blue>struct</font>{string}, string, string, bool, string, int, string, int, string, string}
        + CurrentlyPlayingType string
        + Actions <font color=blue>struct</font>{<font color=blue>struct</font>{bool, bool, bool, bool}}
        + IsPlaying bool

    }
    class CurrentlyPlaying << (S,Aquamarine) >> {
        + Playing bool

    }
    class Daily << (S,Aquamarine) >> {
        + Sunrise []int
        + PrecipitationSum []float64
        + Weathercode []int
        + Temperature2MMin []float64
        + Time []int
        + Temperature2MMax []float64
        + Sunset []int

    }
    class DailyUnits << (S,Aquamarine) >> {
        + Sunrise string
        + PrecipitationSum string
        + Weathercode string
        + Temperature2MMin string
        + Time string
        + Temperature2MMax string
        + Sunset string

    }
    class Device << (S,Aquamarine) >> {
        + Device string
        + Model string
        + DeviceName string
        + Controllable bool
        + Retrievable bool
        + SupportCmds []string
        + Properties <font color=blue>struct</font>{<font color=blue>struct</font>{<font color=blue>struct</font>{int, int}}}

    }
    class DevicesResponse << (S,Aquamarine) >> {
        + Devices []Device

    }
    class Dhcp << (S,Aquamarine) >> {
        + Networks <font color=blue>map</font>[string]Lan

    }
    class Govee << (S,Aquamarine) >> {
        - devices <font color=blue>map</font>[string]Device

        - fetchDevices() ([]Device, error)
        - sendApiRequest(method string, path string, body json.RawMessage) (json.RawMessage, error)
        - getAllStates(device Device, id string) (<font color=blue>interface</font>{}, error)
        - getSingleState(device Device, mode string) (string, error)
        - control(device Device, cmd Cmd) error
        - setOn(device Device, b bool) error
        - setLevel(device Device, b int) error
        - setState(device Device, value string, mode string, id string) error
        - statePut(device Device, mode string, id string) models.FuncPut
        - stateGet(device Device, mode string, id string) models.FuncGet
        - push() error

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class HS100 << (S,Aquamarine) >> {
        - devices <font color=blue>map</font>[string]*hs100.Hs100

        - findDevices() error
        - pull() error
        - put(device *hs100.Hs100) models.FuncPut
        - get(device *hs100.Hs100) models.FuncGet

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class Homekit << (S,Aquamarine) >> {
        - bridge *accessory.Bridge
        - config hc.Config
        - devices <font color=blue>map</font>[string]*service.Service

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class Hourly << (S,Aquamarine) >> {
        + ShortwaveRadiation []float64
        + Precipitation []float64
        + Relativehumidity2M []int
        + Winddirection10M []int
        + Weathercode []int
        + Windgusts10M []float64
        + ApparentTemperature []float64
        + Time []int
        + Windspeed10M []float64
        + Temperature2M []float64

    }
    class HourlyUnits << (S,Aquamarine) >> {
        + ShortwaveRadiation string
        + Precipitation string
        + Winddirection10M string
        + Windspeed10M string
        + ApparentTemperature string
        + Weathercode string
        + Windgusts10M string
        + Time string
        + Temperature2M string
        + Relativehumidity2M string

    }
    class Lan << (S,Aquamarine) >> {
        + NameServer []string
        + Subnets <font color=blue>map</font>[string]Subnet

    }
    class MacMeta << (S,Aquamarine) >> {
        - localDisplay bool

        - createDisplaySwitch() error
        - displayOn() error
        - displayOff() error

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class Range << (S,Aquamarine) >> {
        + Start string
        + Stop string

    }
    class Response << (S,Aquamarine) >> {
        + Data json.RawMessage
        + Message string
        + Code int
        + Success bool
        + Data Dhcp
        + Error <font color=blue>interface</font>{}

    }
    class SetStateRequest << (S,Aquamarine) >> {
        + Device string
        + Model string

    }
    class Spotify << (S,Aquamarine) >> {
        - api SpotifyApi
        - id string

        + Accounts <font color=blue>map</font>[string]SpotifyApi

        - push() error

        + PutAttribute(key string) models.FuncPut
        + GetAttribute(key string) models.FuncGet
        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class SpotifyApi << (S,Aquamarine) >> {
        + Token string
        + ExpiresAt time.Time
        + Refresh string
        + Data json.RawMessage

        - current() (string, error)
        - play() (string, error)
        - pause() (string, error)
        - next() (string, error)
        - previous() (string, error)
        - analyzeTrack(trackId string) (string, error)
        - authenticatedRequest(method string, path string) (string, error)
        - beginListening(e <font color=blue>chan</font> string) 
        - loginURL() string
        - requestToken(code string) 
        - refreshAccess() 
        - basicRequest(path string, values url.Values) (string, error)

        + Authenticate() 
        + GetToken() (string, error)

    }
    class SpotifyCallback << (S,Aquamarine) >> {
        + AccessToken string
        + TokenType string
        + ExpiresIn int
        + RefreshToken string
        + Scope string

    }
    class SpotifyRefresh << (S,Aquamarine) >> {
        + AccessToken string
        + TokenType string
        + Scope string
        + ExpiresIn int

    }
    class SpotifyState << (S,Aquamarine) >> {
        + Title string
        + Cover string
        + Thumbnail string
        + Artists string
        + Album string
        + Progress int
        + Updated time.Time
        + Duration int
        + Explicit bool
        + Playing bool
        + Popularity int
        + Volume int
        + Device string

    }
    class Squid << (S,Aquamarine) >> {
        - dmx ft232.DMXController
        - state <font color=blue>map</font>[int]int
        - entities <font color=blue>map</font>[int]string
        - stateMutex sync.RWMutex
        - connected bool

        - setChannelValue(channel int, value int) error
        - getChannelValue(channel int) (int, error)
        - isLocalOn(channel int) bool
        - getLocalValue(channel int) int
        - setLocalValue(channel int, value int) error
        - isChannelOn(channel int) (bool, error)
        - findDevices() error
        - connect() error
        - pull() error

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class StateResponse << (S,Aquamarine) >> {
        + Properties []<font color=blue>map</font>[string]json.RawMessage
        + Device string
        + Model string

    }
    class Subnet << (S,Aquamarine) >> {
        + DefaultRouter string
        + Lease string
        + Range <font color=blue>map</font>[int]Range

    }
    class Vyos << (S,Aquamarine) >> {
        - scanSubnet(network models.Network) error
        - fetchNetworks() error

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class Weather << (S,Aquamarine) >> {
        - forecast WeatherAPI
        - localDisplay bool
        - eId string

        - forecastBuffer() (string, error)
        - fetchWeather() error
        - pull() error

        + Setup() (plugin.Config, error)
        + Update() error
        + Run() error

    }
    class WeatherAPI << (S,Aquamarine) >> {
        + UtcOffsetSeconds int
        + GenerationtimeMs float64
        + Latitude float64
        + Longitude float64
        + Elevation int
        + CurrentWeather <font color=blue>struct</font>{float64, int, int, int, float64}
        + Hourly Hourly
        + Daily Daily
        + HourlyUnits HourlyUnits
        + DailyUnits DailyUnits

    }
    class spectrum << (S,Aquamarine) >> {
        + On *characteristic.On
        + Dim *characteristic.Brightness
        + Cct *characteristic.ColorTemperature

    }
    class spectrumLight << (S,Aquamarine) >> {
        - spectrum *spectrum

        - syncAttributes(a *controller.Attributes, id string) error

    }
}
"plugin.Module" *-- "main.Govee"
"plugin.Module" *-- "main.HS100"
"plugin.Module" *-- "main.Homekit"
"plugin.Module" *-- "main.MacMeta"
"main.Cmd" *-- "main.SetStateRequest"
"plugin.Module" *-- "main.Spotify"
"plugin.Module" *-- "main.Squid"
"plugin.Module" *-- "main.Vyos"
"plugin.Module" *-- "main.Weather"
"service.Service" *-- "main.spectrum"
"accessory.Accessory" *-- "main.spectrumLight"


namespace models {
    class Attribute << (S,Aquamarine) >> {
        - put FuncPut
        - get FuncGet

        + Id string
        + Value string
        + Updated time.Time
        + Request string
        + Requested time.Time
        + Entity string
        + Key string
        + Type string
        + Order int

        + Path() string
        + SetValue(val string) 
        + UpdateValue(val string, stamp time.Time) error
        + SendRequest(val string) error
        + FnPut(put FuncPut) 
        + FnGet(get FuncGet) 
        + AsInt() int
        + AsFloat() float64
        + AsBool() bool

    }
    class Connection << (S,Aquamarine) >> {
        - active *bool
        - edit <font color=blue>chan</font> <font color=blue>interface</font>{}
        - done <font color=blue>chan</font> bool

        + WS *websocket.Conn

        + Active() bool
        + Send(body <font color=blue>interface</font>{}) 
        + Close() 
        + Watch() 

    }
    class Device << (S,Aquamarine) >> {
        + NetworkId string
        + EntityId string
        + Name string
        + Hostname string
        + Mac string
        + Ipv4 string
        + Ipv6 string

        + Emplace() error
        + FetchAll() []Device
        + Update() error

    }
    class Endpoint << (S,Aquamarine) >> {
        - registered bool
        - enrolledSince time.Time

        + Name string
        + Type string
        + Frequency int
        + Connected bool
        + Key string
        + Connection *Connection

        - closeHandler(code int, text string) error

        + Compile() <font color=blue>map</font>[string]<font color=blue>interface</font>{}
        + Enroll(ws *websocket.Conn) error
        + Enrolled() bool
        + BeforeCreate(_ *gorm.DB) error
        + Fetch() error
        + Unenroll() 

    }
    class Entity << (S,Aquamarine) >> {
        + Name string
        + Alias string
        + Type string
        + Module string
        + Locked bool
        + Config string
        + Position string
        + Icon string
        + Frequency int
        + Neural string
        + Predicted string

        - delete() error
        - update() error

        + Unlock() error
        + Lock() error
        + ChangeConfig(value string) error
        + ChangeNeural(value string) error
        + ChangeIcon(icon string) error
        + Rename(name string) error
        + Suggest(state string) error
        + Find() error
        + Path() string
        + Emplace() error

    }
    class Log << (S,Aquamarine) >> {
        + EntityId string
        + Power string
        + Mode string
        + Level int
        + CCT int

    }
    class Module << (S,Aquamarine) >> {
        + Name string
        + Path string
        + Type string
        + Description string
        + Version string
        + Author string

        + Build() error
        + Load() error
        + Run() error
        + Unload() error
        + Register() error
        + BeforeCreate(_ *gorm.DB) error
        + AfterFind(_ *gorm.DB) error
        + Emplace() error

    }
    class Network << (S,Aquamarine) >> {
        + Name string
        + Dns string
        + Router string
        + Lease string
        + Mask string
        + Range string

        + Emplace() error
        + FetchAll() []Network

    }
    class Remote << (S,Aquamarine) >> {
        - conn *websocket.Conn
        - rw *sync.Mutex

        - closeHandler(code int, text string) error

        + Send(body json.RawMessage) error
        + Close() error
        + Read() (json.RawMessage, error)

    }
    class User << (S,Aquamarine) >> {
        + Username string
        + First string
        + Middle string
        + Last string
        + Type string
        + Password string

        + Parse(data []byte) error
        + Register(user *User) error
        + FindById(id string) (User, error)
        + Authenticate(user User) (User, error)

    }
    class Zone << (S,Aquamarine) >> {
        + Name string
        + Entities []Entity
        + User string

        + Emplace() error
        + FetchAll() (error, []Zone)
        + Update() error
        + Restore() error
        + Delete() error

    }
    class models.FuncGet << (T, #FF7700) >>  {
    }
    class models.FuncPut << (T, #FF7700) >>  {
    }
}
"store.Persistent" *-- "models.Device"
"store.Persistent" *-- "models.Endpoint"
"store.Persistent" *-- "models.Entity"
"store.Persistent" *-- "models.Log"
"store.Persistent" *-- "models.Module"
"store.Persistent" *-- "models.Network"
"store.Persistent" *-- "models.User"
"store.Persistent" *-- "models.Zone"


namespace plugin {
    class Config << (S,Aquamarine) >> {
        + Name string
        + Type string
        + Description string
        + Version string
        + Author string

    }
    class Module << (S,Aquamarine) >> {
        + LastUpdate time.Time
        + Frequency int

        + Connect(ctrl *controller.Controller) error

    }
    interface ModuleInterface  {
        + Setup() (Config, error)
        + Connect( *controller.Controller) error
        + Run() error
        + Update() error

    }
}
"controller.Controller" *-- "plugin.Module"
"plugin.Config" *-- "plugin.Module"


namespace pulse {
    class Proc << (S,Aquamarine) >> {
        + Pointer uintptr
        + Name string
        + Start time.Time
        + Stop time.Time
        + Delta int
        + Frequency int
        + Complete bool
        + Depth int

    }
    class Timing << (S,Aquamarine) >> {
        - waiting <font color=blue>map</font>[uintptr]Proc
        - handler <font color=blue>chan</font> Proc
        - mt sync.Mutex
        - history <font color=blue>map</font>[uintptr]Proc

        - handle() 
        - beginFixed(freq int, rf *runtime.Func) 
        - begin(rf *runtime.Func) 
        - end(rf *runtime.Func) error

        + Timings() <font color=blue>map</font>[uintptr]Proc

    }
}


namespace server {
    interface Daemon  {
        + Setup(ctrl *controller.Controller, bond *bond.Bond) error
        + Name() string
        + Run() error
        + Update() error

    }
    class Endpoints << (S,Aquamarine) >> {
        - bond *bond.Bond
        - router chi.Router
        - connections sync.Map
        - watching <font color=blue>map</font>[string]bool
        - ctrl *controller.Controller

        - attributeBroadcast(ent models.Attribute) error
        - reactive(operation string) <font color=blue>func</font>(<font color=blue>interface</font>{}) error
        - itemBroadcast(operation string, body <font color=blue>interface</font>{}) error
        - socketAdaptor(w http.ResponseWriter, req *http.Request) 
        - sendError(id string, body <font color=blue>interface</font>{}) error
        - registerEndpoint(w http.ResponseWriter, rq *http.Request) 

        + Name() string
        + Setup(ctrl *controller.Controller, bond *bond.Bond) error
        + Broadcast(body <font color=blue>interface</font>{}) error
        + Run() error
        + Timings() error
        + Metadata() error
        + Update() error

    }
    class Identifier << (S,Aquamarine) >> {
        + Id string

    }
    class Metadata << (S,Aquamarine) >> {
        + System System

    }
    class ModuleController << (S,Aquamarine) >> {
        - loaded bool
        - running bool
        - module plugin.ModuleInterface
        - config plugin.Config
        - source string
        - binary string
        - state string

        - build() error
        - setup(ctrl *controller.Controller) error
        - start() error
        - update() error

    }
    class Modules << (S,Aquamarine) >> {
        - mcs <font color=blue>map</font>[string]*ModuleController
        - modMutex sync.Mutex
        - ctrl *controller.Controller
        - bond *bond.Bond
        - configured bool
        - running bool

        - buildModules() error
        - values() ([]*ModuleController, error)
        - buildModuleDir(dir string) error

        + Name() string
        + Setup(ctrl *controller.Controller, bond *bond.Bond) error
        + Run() error
        + Update() error

    }
    class Runtime << (S,Aquamarine) >> {
        - ctrl *controller.Controller
        - daemons []Daemon
        - eventHandler <font color=blue>chan</font> bond.Msg

        + System System
        + Endpoints *Endpoints
        + Modules *Modules

        - handleRequest() 
        - addDaemons(daemon ...Daemon) 

        + Name() string
        + Update() error
        + SetupDaemons() error
        + Load() error
        + Run() error

    }
    class System << (S,Aquamarine) >> {
        + Name string
        + Version string
        + Environment string
        + Ipv4 string
        + Ipv6 string
        + Hostname string
        + Mac string
        + Go string
        + Cores int

    }
    class server.Claims << (T, #FF7700) >>  {
    }
}

"server.Daemon" <|-- "server.Endpoints"
"server.Daemon" <|-- "server.Modules"

namespace store {
    class Database << (S,Aquamarine) >> {
    }
    class Persistent << (S,Aquamarine) >> {
        - deletedAt *time.Time

        + CreatedAt time.Time
        + UpdatedAt time.Time
        + Deleted bool
        + Id string

    }
}
"gorm.DB" *-- "store.Database"


namespace udap {
    class Udap << (S,Aquamarine) >> {
        - runtime *server.Runtime

        - startup() error

    }
}


"__builtin__.int" #.. "log.LogType"
"models.<font color=blue>func</font>() (string, error)" #.. "models.FuncGet"
"models.<font color=blue>func</font>(string) error" #.. "models.FuncPut"
"server.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "server.Claims"
@enduml
